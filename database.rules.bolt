function hasRole(role) { auth != null && auth.token[role] == true }
function isCoordinator() { hasRole('coordinator') }

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { this == (prior(this) == null ? now : prior(this)) }
}

type ReadOnlyCoordinator {
  read() { isCoordinator() }
}

type WriteOnlyCoordinator {
  write() { isCoordinator() }
}

type WriteOnlyCoordinatorField<T> extends T {
  write() { isCoordinator() }
}

type OnlyNew {
  validate() { prior(this) == null }
}

type EditedFileFieldsStatus {
  validate() {
    this.test(
      /"Spare" | "Given" | "Submitted" | "Revise" | "Done"/
    )
  }
}

type EditedFileFields {
  status: WriteOnlyCoordinatorField<EditedFileFieldsStatus> | Null,
  assignee: WriteOnlyCoordinator | Null,
  followUp: WriteOnlyCoordinatorField<String> | Null
  feedback: WriteOnlyCoordinatorField<String> | Null
}

type EditedFile {
  trackEditing: EditedFileFields | Null,
  soundEngineering: EditedFileFields | Null

  read() { hasRole("coordinator") }
}

path /donations {
  path /cash is ReadOnlyCoordinator {
    path /{push_id} {
      create() {
        return root.donations.tokens[this.token].valid == true
      }
    }
  }
}

path /users is ReadOnlyCoordinator {
  index() {[
    "emailAddress",
    "roles/CR",
    "roles/SQR",
    "roles/SE",
    "uploadCode"
  ]}
  
  path /{userId} {
    path /timestamp is CurrentTimestamp;
    path /isAvailableOnWhatsApp is Boolean;
    path /notes is WriteOnlyCoordinatorField<String>;
    path /emailAddress {
      create() { true }
    }
    path /languages {
      /{langName} is Boolean;
    }
    path /status is WriteOnlyCoordinatorField<String>;
    path /roles is WriteOnlyCoordinator {
      /{roleId} is Boolean;
    }
  }
}

type OriginalFileName extends String {
  validate() { this.test(/^\w+-\d+/) }
}

type Assignee {
  emailAddress: String,
  name: String,
}

type Allotment<Status> {
  assignee: Assignee,
  status: Status,
  notes: String | Null,
  timestampGiven: InitialTimestamp | Null,
  timestampDone: InitialTimestamp | Null,
  token: String | Null,

  validate() { this.status != 'Done' || this.timestampGiven != null }
}

type ReportingAllotmentStatus extends String {
  validate() { this.test(/^Spare|Given|WIP|Done$/) }
}

type ReportingAllotment extends Allotment<ReportingAllotmentStatus>;

path /allotments/SQR is Map<OriginalFileName, ReportingAllotment> {
  index() { ["status", "assignee/emailAddress", "token"] }
}

type Submission {
  created: InitialTimestamp,
  changed: CurrentTimestamp,
  completed: InitialTimestamp | Null,
  comments: String | Null,
  token: String,
}

type SQRSubmission extends Submission {
  duration: Object | Null,
  soundQualityRating: String | Null,
  soundIssues: Any | Null,
  unwantedParts: Any | Null,
}

// Final SQR submissions are stored here
path /submissions/SQR/final/{fileName} is SQRSubmission {
  read() { true }
  write() {
    this != null
    &&
    // Checking that the submitted token matches the token in the allotment
    root.allotments.SQR[fileName].token == this.token
  }
}

// Draft SQR submissions are sotred here
// Anyone having the token can edit the draft
path /submissions/SQR/drafts/{fileName}/{token} is SQRSubmission {
  read() { true }
  write() { this != null }
}

path /edited/{list}/{fileName} is EditedFile;
