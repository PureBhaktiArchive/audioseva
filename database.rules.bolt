function isSignedIn() { auth != null }
function hasRole(role) { isSignedIn() && auth.token[role] == true }
function isCoordinator() { hasRole('coordinator') }

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { this == (prior(this) == null ? now : prior(this)) }
}

type ReadOnlyCoordinator {
  read() { isCoordinator() }
}

type WriteOnlyCoordinator {
  write() { isCoordinator() }
}

type WriteOnlyCoordinatorField<T> extends T {
  write() { isCoordinator() }
}

path /donations {
  path /cash is ReadOnlyCoordinator {
    path /{push_id} {
      create() {
        return root.donations.tokens[this.token].valid == true
      }
    }
  }
}

path /users is ReadOnlyCoordinator {
  index() {[
    "emailAddress",
    "roles/CR",
    "roles/SQR",
    "roles/SE",
    "uploadCode"
  ]}
  
  path /{userId} {
    path /timestamp is CurrentTimestamp;
    path /isAvailableOnWhatsApp is Boolean;
    path /notes is WriteOnlyCoordinatorField<String>;
    path /emailAddress {
      create() { true }
    }
    path /languages {
      /{langName} is Boolean;
    }
    path /status is WriteOnlyCoordinatorField<String>;
    path /roles is WriteOnlyCoordinator {
      /{roleId} is Boolean;
    }
  }
}

// Original file name, for example BR-035A.
type OriginalFileName extends String {
  validate() { this.test(/^\w+-\d+/) }
}

// Task ID, for example ML2-135-3.
type TaskID extends String {
  validate() { this.test(/^\w+-\d+-\d{1,2}$/) }
}

// Status of the allotment.
// Can be either one of the predefined values or virtually any string.
type Status extends String {
  validate() { this.test(/^Spare|Given|WIP|Done|\w+(\s\w+)*]+$/) }
}

type Assignee {
  emailAddress: String,
  name: String,
}

type Allotment {
  status: Status,
  assignee: Assignee | Null,
  notes: String | Null,
  timestampGiven: InitialTimestamp | Null,
  timestampDone: InitialTimestamp | Null,

  validate() {
    (this.status != 'Done' || this.timestampDone != null) &&
    (this.status == 'Spare' || (this.timestampGiven != null && this.assignee != null))
  }
}

type ReportingAllotment extends Allotment {
  token: String | Null,

  validate() { this.status == 'Spare' || this.token != null }
}

type Submission {
  author: Assignee | Null,
  created: Number | Null,
  changed: CurrentTimestamp,
  completed: InitialTimestamp,
  comments: String | Null,
}

// Audio timing interval, in seconds
type TimingInterval<T> {
  beginning: T,
  ending: T,
}

type AudioAnnotation {
  entireFile: Boolean | Null,
  beginning: String | Null,
  ending: String | Null,
  type: String,
  description: String | Null,

  validate() { this.entireFile != null || (this.beginning != null && this.ending != null) }
}

type SQRSubmission extends Submission {
  duration: TimingInterval<String> | Null,
  soundQualityRating: String,
  soundIssues: AudioAnnotation[],
  unwantedParts: AudioAnnotation[],
}

function tokenIsValid(token, fileName, phase) {
  return phase.allotments[fileName].token == token;
}

path /SQR {
  path /allotments is Map<OriginalFileName, ReportingAllotment> {
    index() { ["status", "assignee/emailAddress", "token"] }
  }

  path /submissions {

    // Draft submissions, writable by anyone who knows the token.
    path /drafts/{fileName}/{token} {
      read() { true }
      write() { true }
    }

    // Completed submissions, writable only if the token is valid.
    // This path triggers submission processing.
    path /completed/{fileName}/{token} is SQRSubmission {
      read() { true }
      create() { tokenIsValid(token, fileName, root.SQR) }
      update() {
        tokenIsValid(token, fileName, root.SQR)
        &&
        (isCoordinator() || root.SQR.allotments[fileName].status != 'Done')
      }
    }

    path /migrated/{fileName}/{token} is SQRSubmission {
      read() { true }
    }
    
    // Cold storage for the submission, writable only by the function.
    path /final {
      index() { ["author/emailAddress"] }
      path /{fileName} is SQRSubmission;
    }
  }
}

type AudioChunk extends TimingInterval<Number> {
  fileName: String,
  unwantedParts: String,
}

type FileResolution {
  timestamp: InitialTimestamp,
  isApproved: Boolean,
  feedback: String,

  create() { isCoordinator() }
}

type FileVersion {
  timestamp: InitialTimestamp,
  uploadPath: String, // Path in the `uploads` bucket
  resolution: FileResolution | Null,
}

type TrackEditingTask extends Allotment {
  isRestored: Boolean,
  chunks: AudioChunk[],
  versions: FileVersion[],
  timestampImported: InitialTimestamp | Null,

  read() { this.assignee.emailAddress == auth.token.email }
}

path /TE {
  path /tasks is Map<TaskID, TrackEditingTask> {
    index() { ["status", "assignee/emailAddress"] }
    read() {
      isSignedIn() && (
        query.orderByChild == 'assignee/emailAddress' && query.equalTo == auth.token.email
        || isCoordinator()
      )
    }
  }
}
