name: Deployment

on: ["deployment"]

jobs:
  deployment:
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: 8.x

      - name: "Deployment pending"
        uses: "deliverybot/deployment-status@master"
        with:
          state: "pending"
          token: "${{ github.token }}"

      - name: "Install dependencies"
        run: |
          npm ci --prefix frontend
          npm ci --prefix functions
          npm install -g firebase-bolt firebase-tools

      - name: Set environment variables for Staging
        if: github.event.deployment.environment == 'staging'
        run: |
          echo ::set-env name=SERVICE_ACCOUNT::"${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT }}"
          echo ::set-env name=FIREBASE_PROJECT::"${{ secrets.STAGING_FIREBASE_PROJECT }}"
          echo ::set-env name=PROJECT_DOMAIN::"${{ secrets.STAGING_PROJECT_DOMAIN }}"

      - name: "Deploy to ${{ github.event.deployment.environment }}"
        run: |
          echo ${{ env.SERVICE_ACCOUNT }} > service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=./service-account.json
          firebase use ${{ env.FIREBASE_PROJECT }}
          firebase target:apply storage uploads te.uploads.${{ env.PROJECT_DOMAIN }}
          firebase deploy --force

      - name: "Deployment success"
        if: success()
        uses: "deliverybot/deployment-status@master"
        with:
          state: "success"
          token: "${{ github.token }}"

      - name: "Deployment failure"
        if: failure()
        uses: "deliverybot/deployment-status@master"
        with:
          state: "failure"
          token: "${{ github.token }}"
