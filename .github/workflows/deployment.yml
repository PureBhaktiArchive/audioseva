#
# sri sri guru gauranga jayatah
#

name: Deployment
on: deployment

jobs:
  deployment:
    name: Deployment to Firebase
    runs-on: ubuntu-latest

    steps:
      - name: Turnstyle
        uses: softprops/turnstyle@master
        with:
          continue-after-seconds: 180
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report deployment status in progress
        uses: maxkomarychev/oction-create-deployment-status@master
        with:
          token: ${{ github.token }}
          deployment_id: ${{ github.event.deployment.id }}
          state: in_progress

      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Install dependencies
        run: |
          npm ci --prefix frontend
          npm ci --prefix functions
          npm install -g firebase-bolt firebase-tools

      - name: Build
        run: |
          npm run build --prefix frontend
          npm run build --prefix functions

      - name: Deploy to ${{ github.event.deployment.environment }}
        run: |
          FIREBASE_PROJECT=${DEPLOYMENT_ENVIRONMENT^^}_FIREBASE_PROJECT
          PROJECT_DOMAIN=${DEPLOYMENT_ENVIRONMENT^^}_PROJECT_DOMAIN
          SERVICE_ACCOUNT=${DEPLOYMENT_ENVIRONMENT^^}_SERVICE_ACCOUNT
          echo ${!SERVICE_ACCOUNT} > service-account.json
          firebase use ${!FIREBASE_PROJECT}
          firebase target:apply storage uploads te.uploads.${!PROJECT_DOMAIN}
          firebase deploy --non-interactive --force
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./service-account.json
          DEPLOYMENT_ENVIRONMENT: ${{ github.event.deployment.environment }}
          STAGING_FIREBASE_PROJECT: ${{ secrets.STAGING_FIREBASE_PROJECT }}
          STAGING_PROJECT_DOMAIN: ${{ secrets.STAGING_PROJECT_DOMAIN }}
          STAGING_SERVICE_ACCOUNT: ${{ secrets.STAGING_FIREBASE_SERVICE_ACCOUNT }}
          PRODUCTION_FIREBASE_PROJECT: ${{ secrets.PRODUCTION_FIREBASE_PROJECT }}
          PRODUCTION_PROJECT_DOMAIN: ${{ secrets.PRODUCTION_PROJECT_DOMAIN }}
          PRODUCTION_SERVICE_ACCOUNT: ${{ secrets.PRODUCTION_FIREBASE_SERVICE_ACCOUNT }}

      - name: Report deployment success
        if: success()
        uses: maxkomarychev/oction-create-deployment-status@master
        with:
          token: ${{ github.token }}
          deployment_id: ${{ github.event.deployment.id }}
          state: success

      - name: Report deployment failure
        if: failure()
        uses: maxkomarychev/oction-create-deployment-status@master
        with:
          token: ${{ github.token }}
          deployment_id: ${{ github.event.deployment.id }}
          state: failure

  tag:
    name: Tag
    needs: deployment
    if: ${{ github.event.deployment.environment == 'production' }}
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - uses: actions/checkout@v2
      - name: Create tag
        uses: tvdias/github-tagger@v0.0.2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.date.outputs.date }}
